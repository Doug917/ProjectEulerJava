#1.
public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        int n = in.nextInt();
        m1 = n/3;
        m2 = n/5;
        m3 = n/15;
        
        result = (3*m1*(m1+1)+5*m2*(m2+1)-15*m3*(m3+1))/2;
        
        if (n%3==0 || n%5==0){
            result -= n;
        }
        System.out.println(result);
    }
}

#2.
public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        
        long n = in.nextLong();
        long mprev = 1,mcurr = 2;
        long result = 0,temp;
    
        while (mcurr <= n){
            if (mcurr % 2 == 0){
                result += mcurr;
            }
            temp = mcurr;
            mcurr = mcurr + mprev;
            mprev = temp;
        }
        System.out.println(result);
    }
}

#3.
public class Solution {
    
    static int nextPrime(ArrayList<Integer> primes){
        
        int newp = primes.get(primes.size()-1)+2;
        int q=1;
        while (true) {
            for (int p:primes){
                q = p;
                if (newp % p == 0 || p*p > newp){
                    break;
                }
            }
            if (q*q > newp){
                return newp;
            }
            newp += 2;
        }
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        
        long n = in.nextLong();
        int lastIndex;
        ArrayList<Integer> plist = new ArrayList<Integer>();
        plist.add(2);
        plist.add(3);
        while (plist.size() <= Math.sqrt(n)){
            plist.add(nextPrime(plist));
        }
        lastIndex = plist.size() - 1;//Now, check for divisibility.
        while (n % plist.get(lastIndex) !=0){
            lastIndex -= 1;
            if (lastIndex == -1){
                break;
            }
        }
        if (lastIndex == -1){
            System.out.println(n);
        }
        else{
            System.out.println(plist.get(lastIndex));
        }
    }
}

#4.
public class Solution {
    
    static boolean isPallindromic(int n){
        
        int numDigits;
        if (n > 99999){
            numDigits = 6;
        }
        else {
            numDigits = 5;
        }
        int[] digits = new int[numDigits];

        for (int i=0;i<numDigits;i++){
            digits[i] = n%10;
            n = (n-digits[i])/10;
        }

        for (int i=0;i<numDigits;i++){
            if (digits[i]!=digits[numDigits-i-1]){
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int product;
        int largestProduct = 1;
        int n = in.nextInt();
        for (int i=999;i>=100;i--){
            for (int j=999;j>=100;j--){
                product = i*j;
                if (isPallindromic(product) && product < n){
                    if (product > largestProduct){
                        largestProduct = product;
                    }
                }
            }
        }
        System.out.println(largestProduct);
    }
}


#5.
public class Solution {
    
    static int gcd(int a, int b){
        if (a==0){
            return b;
        }
        return gcd(b%a, a);
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        
        int n = in.nextInt();
        int result = 1;
        for (int i = 1;i<=n;i++){
            if (result%i != 0){
                result *= i/gcd(result, i);
            }
        }
        System.out.println(result);
    }
}

#6.
public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        long result;
        
        long n = in.nextInt();
        
        result = (n-1)*n*(n+1)*(3*n+2)/12;
        System.out.println(Math.abs(result));
    }
}

#7.
public class Solution {
    
    static int nextPrime(ArrayList<Integer> primes){
        
        int newp = primes.get(primes.size()-1)+2;
        int q=1;
        while (true) {
            for (int p:primes){
                q = p;
                if (newp % p == 0 || p*p > newp){
                    break;
                }
            }
            if (q*q > newp){
                return newp;
            }
            newp += 2;
        }
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        if (n==1){
            System.out.println(2);
        }
        ArrayList<Integer> primes = new ArrayList<Integer>();
        primes.add(2);
        primes.add(3);
        while (primes.size() < n){
            primes.add(nextPrime(primes));
        }
        System.out.println(primes.get(primes.size()-1));
    }
}

#8.
public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        
        int n = in.nextInt();
        int k = in.nextInt();
        String num = in.next();
        // Create an array of the digits of num.
        int[] numArr = new int[n];
        for (int i=0;i<num.length();i++){
            numArr[i] = Integer.parseInt(num.substring(i,i+1));
        }
        int largestProduct = 0;
        int start = 0;
        int currProduct;
        while (start < n-k){
            currProduct = 1;
            for (int j=0;j<k;j++){
                currProduct *= numArr[start+j];
            }
            largestProduct = Math.max(largestProduct,currProduct);
            start += 1;
        }
        System.out.println(largestProduct);
    }
}

#12.
public class Solution {
    
    static int numDivisors(int n){
        
        if (n==1){
            return 1;
        }
        int result = 2;
        int icopy = 1;
        for (int i=2;i*i<n;i++){
            icopy = i;
            if (n%i == 0){
                result += 2;
            }
        }
        if (icopy*icopy == n){
            result += 1;
        }
        
        return result;
    }

    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int triang_number = 1;
        int counter = 1;
        while (numDivisors(triang_number)<=n){
            counter += 1;
            triang_number += counter;
        }
        System.out.println(triang_number);
    }
}

#9.
public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int a;
        int result = -1;
        for (int c=1;c<n;c++){
            for (int b=0;b<n-c;b++){
                a = n - b - c;
                if (a < b && a*a+b*b==c*c){
                    result = Math.max(result, a*b*c);
                }
            }
        }
        System.out.println(result);
    }
}

#35.
public class Solution {
    
    static boolean isCyclic(int n, ArrayList<Integer> primes){
        
        //calculate number of digits.
        int m = n;
        int numDigits = 0;
        while (m>0){
            if (m%10==0){return false;} //number cannot contain any zero-digit.
            m = (m-m%10)/10;
            numDigits += 1;
        }

        // Now, we know number has no 0-digits.  We also know the
        // number of digits.

        //Compute cyclic permutation and see if in primes list.
        //Continue permuting and testing until we have tested all
        //cyclic permutations.  If all are prime, we return true.
        m = n;
        if (! primes.contains(m)){return false;}
        //cyclic permutation:
        m = (m % 10)*(int)Math.pow(10,numDigits-1) + (m - m%10)/10;
        while (m != n){
            if (! primes.contains(m)){
                return false;
            }
            m = (m % 10)*(int)Math.pow(10,numDigits-1) + (m - m%10)/10;
        }

        return true;
        
    }
    
    static int nextPrime(ArrayList<Integer> primes){
        
        int newp = primes.get(primes.size()-1)+2;
        int q=1;
        while (true) {
            for (int p:primes){
                q = p;
                if (newp % p == 0 || p*p > newp){
                    break;
                }
            }
            if (q*q > newp){
                return newp;
            }
            newp += 2;
        }
    }

    public static void main(String[] args) {
        
        //Create list of primes < 1,000,000.
        ArrayList<Integer> primes = new ArrayList<Integer>();
        primes.add(2);
        primes.add(3);
        while (primes.get(primes.size()-1) < 999999){
            primes.add(nextPrime(primes));
        }

        //Now, count the cyclic primes.
        int result = 0;
        for (int p:primes){
            if (isCyclic(p, primes)){
                result += 1;
            }
        }

        System.out.println(result);
        
    }
}
